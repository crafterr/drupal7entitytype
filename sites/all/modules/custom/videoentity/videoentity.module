<?php
/**
 * @file
 * Provides a simple custom entity type named 'video' for tracking embed codes.
 */

/**
 * Implements hook_entity_info().
 */
function videoentity_entity_info() {
  $info = array();
  // Our custom video entity needs to be defined here.
  // See http://drupal.org/node/1026420 and http://drupal.org/node/878804
  // for more documentation.
  $info['video'] = array(
    // Human readable label.
    'label' => t('Video'),
    // Table for storing entity data, defined in hook_schema().
    'base table' => 'videoentity_video',
    // This helps Entity API know how to query your custom table.
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    // This is a uri function provided by the Entity contrib module.
    // It's a simple wrapper around the uri method in the controller class.
    'uri callback' => 'entity_class_uri',
    // These are the default controllers.
    // 'entity class' => 'Entity',
    'entity class' => 'VideoEntity',
    // 'controller class' => 'DrupalDefaultEntityController',
    // Other options provided by the EntityAPI contrib module:
    // 'controller class' => 'EntityAPIController ',
    // 'controller class' => 'EntityAPIControllerExportable',
     'controller class' => 'VideoEntityController',
     // The information below is used to extend the EntityDefaultUIController
     'admin ui' => array(
       'path' => 'admin/videoentity',
       'controller class' => 'VideoEntityUIController',
       'menu wildcard' => '%videoentity',
       'file' => 'videoentity.admin.inc',
     ),
    'module' => 'videoentity',
    //Access Callback to determinate permisions
    'access callback' => 'videoentity_access_callback'

  );

  return $info;
}


/**
 * Implements hook_permission().
 */
function videoentity_permission() {
  return [
    'administer videos' => [
      'title' => t('Administer Video Entities')
    ],
    'view videos' => [
      'title' => t('View Video Entities')
    ]
  ];
}

/**
 * Check access permissions for video entities
 */
function videoentity_access_callback($op, $videoentity = NULL, $account = NULL) {
  if (($op == 'view' && user_access('view videos',$account)) || user_access('administer videos',$account)) {
    return true;
  }
  return false;
}

/**
 * Implements hook_menu().
 */
function videoentity_menu() {
  $items = array();
  $items['videoentity'] = array(
    'title' => 'Demo page',
    'page callback' => 'videoentity_demo_page',
    'access callback' => TRUE,
    'menu' => 'navigation',
  );
  $items['myvideo/%videoentity'] = array(
    'title' => 'Videodsds',
    'page callback' => 'videoentity_view_entity',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  return $items;
}



/**
 * Menu autoloader for /video.
 */
function videoentity_load($id) {
  $video = entity_load('video', array($id));
  return array_pop($video);
}

/**
 * Callback for /videoentity page.
 *
 * Just a place to test things out and be able to see the results on a page.
 */
function videoentity_demo_page() {
  $video = entity_load('video', array(1));
  kpr($video);

  // Or load it with EFQ.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'video');
  $results = $query->execute();
  kpr($results);
  return 'hello there!';
}

/**
 * Callback for /video/ID page.
 *
 * Just a place to render a complete video entity.
 */
function videoentity_view_entity($video) {

  kpr($video);
  return array
  (
    '#markup' => t('Video entity: @video',['@video'=>$video->name]),
  );
  drupal_set_title($video->name);
  $video_entity = entity_view('video', array($video->id => $video));
  kpr($video_entity);
  return $video_entity;
}





