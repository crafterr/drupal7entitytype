<?php
/**
 * @file
 * Provides a simple custom entity type named 'video' for tracking embed codes.
 */

/**
 * Implements hook_entity_info().
 */
function myentity_entity_info() {
  $info = array();
  // Our custom video entity needs to be defined here.
  // See http://drupal.org/node/1026420 and http://drupal.org/node/878804
  // for more documentation.
  $info['myentity'] = array(
    // Human readable label.
    'label' => t('My Entity'),
    // Table for storing entity data, defined in hook_schema().
    'base table' => 'myentity',
    // This helps Entity API know how to query your custom table.
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    // This is a uri function provided by the Entity contrib module.
    // It's a simple wrapper around the uri method in the controller class.
    'uri callback' => 'entity_class_uri',
    // These are the default controllers.
    // 'entity class' => 'Entity',
    'entity class' => 'MyEntity',
    // 'controller class' => 'DrupalDefaultEntityController',
    // Other options provided by the EntityAPI contrib module:
    // 'controller class' => 'EntityAPIController ',
    // 'controller class' => 'EntityAPIControllerExportable',
    'controller class' => 'MyEntityController',
     // The information below is used to extend the EntityDefaultUIController
     'admin ui' => array(
       'path' => 'admin/myentity',
       'controller class' => 'MyEntityEntityUIController',
       'menu wildcard' => '%myentity',
       'file' => 'myentity.admin.inc',
     ),
    'module' => 'myentity',
    //Access Callback to determinate permisions
    'access callback' => 'myentity_access_callback'

  );

  return $info;
}

/**
 * Implements hook_permission().
 */
function myentity_permission() {
  return [
    'administer myentity' => [
      'title' => t('Administer MyEntity Entities')
    ],
    'view myentity' => [
      'title' => t('View Myentity Entities')
    ]
  ];
}

/**
 * Check access permissions for video entities
 */
function myentity_access_callback($op, $videoentity = NULL, $account = NULL) {
  if (($op == 'view' && user_access('view myentity',$account)) || user_access('administer myentity',$account)) {
    return true;
  }
  return false;
}

/**
 * Implements hook_menu().
 */
function myentity_menu() {
  $items = array();
  $items['myentity'] = array(
    'title' => 'My Entity Page',
    'page callback' => 'myentity_page',
    'access callback' => TRUE,
    'menu' => 'navigation'
  );

  $items['myentity/%myentity'] = array(
    'title' => 'My entity',
    'page callback' => 'myentity_view_entity',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  return $items;
}



/**
 * Menu autoloader for /video.
 */
function myentity_load($id) {
  $video = entity_load('myentity', array($id));
  return array_pop($video);
}

/**
 * Callback for /videoentity page.
 *
 * Just a place to test things out and be able to see the results on a page.
 */
function myentity_page() {
  $video = entity_load('myentity', array(1));
  kpr(entity_get_info());

  // Or load it with EFQ.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'myentity');
  $results = $query->execute();
  kpr($results);
  return 'hello there!';
}

function myentity_view_entity($myentity) {
  kpr($myentity);
  return 'weszlo';
}

